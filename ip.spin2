{{
Propeller 2 Internet Protocol implementation
Copyright Â© 2022 Albert Emanuel Milani
See end of file for terms of use (MIT).
}}

CON '' Initialization
PUB init

  link_reset

CON '' Ethernet framing
'' Assumes the caller deals with the CRC and doesn't include it in lengths.
PUB on_rx_eth(ptr, rx_len) : tx_len, dst | ethertype, cb

  if rx_len < 14
    debug("rx eth ", uhex_word(rx_len), " < 14; too short")
    abort 0

  if rx_len => 1524
    debug("rx eth ", uhex_word(rx_len), " too long")
    abort 0

  '' TODO: Only accept packets to our MAC, broadcast, or relevant multicast addresses (e.g. mDNS)

  ethertype := bswap2(word[ptr][6])

  'debug("rx eth ", udec(rx_len), uhex_byte_array(ptr, rx_len))

  ' Find correct callback according to EtherType
  case ethertype
    ETHERTYPE_IPv4: cb := @on_rx_ipv4
    ETHERTYPE_ARP : cb := @on_rx_arp
    ETHERTYPE_IPv6: cb := @on_rx_ipv6
    other:
      debug("rx eth ", uhex_word(rx_len), ": unknown ", uhex_word(ethertype))
      abort 0

  ' Dispatch payload
  tx_len, dst := cb(ptr, ptr + 14, rx_len - 14):2

  ' Add Ethernet header to tx_len
  tx_len += 14

  finalize_tx_eth(ptr, tx_len, dst)

PUB setup_tx_eth(ptr, ethertype) : payload_ptr

  word[ptr][6] := bswap2(ethertype)

  payload_ptr := ptr + 14

PUB finalize_tx_eth(ptr, tx_len, dst) | ethertype, cb

  if dst => 0
    ' Get dst address from hosts table
    debug("NYI: dst MAC from hosts table")
    abort 0
  elseif dst == DST_REPLY
    ' Fill dst address with old src
    bytemove(ptr, ptr + 6, 6)
  elseif dst == DST_BROADCAST
    bytefill(ptr, $FF, 6)
  elseifnot dst == DST_MANUAL
    abort 0

  ' Fill src address with our own
  bytemove(ptr + 6, @ownMAC, 6)

  ethertype := bswap2(word[ptr][6])

  ' Find correct callback according to EtherType
  case ethertype
    ETHERTYPE_IPv4: cb := @finalize_tx_ipv4
    ETHERTYPE_ARP : cb := @finalize_tx_arp
    ETHERTYPE_IPv6: cb := @finalize_tx_ipv6
    other:
      debug("tx eth ", uhex_word(tx_len), ": unknown ", uhex_word(ethertype))
      abort 0

  ' Call function according to EtherType
  cb(ptr + 14, tx_len - 14, dst):0

  ' Pad frame to at least 60 bytes (not counting 4 byte CRC)
  if tx_len < 60
    bytefill(@byte[ptr][tx_len], 0, 60 - tx_len)
    tx_len := 60

CON '' ARP - RFC 826
  ETHERTYPE_ARP = $0806
  ARP_REQUEST = 1
  ARP_REPLY   = 2
PUB on_rx_arp(eth_hdr, ptr, rx_len) : tx_len, dst | opcode

  if rx_len < 28
    debug("rx ARP ", uhex_word(rx_len), " < ", uhex_(28), "; too short")
    abort 0
  if rx_len > 28
    '' TODO: Duh - 60 byte min frame size
    debug("rx ARP ", uhex_word(rx_len), " > ", uhex_(28), "; extra bytes")

  ifnot word[ptr] == bswap2($0001) {
  } and word[ptr][1] == bswap2(ETHERTYPE_IPv4) {
  } and byte[ptr][4] == 6 {
  } and byte[ptr][5] == 4
    debug("rx ARP ", uhex_word(rx_len), ": unsupported protocol")
    abort 0

  case opcode := bswap2(word[ptr][3])
    ARP_REQUEST:
      ' send reply
      word[ptr][3] := bswap2(2)
      '' Reply to sender
      tx_len, dst := 28, DST_REPLY
      ifnot long[ptr+24] <> ownIPv4.long or word[ptr+18] or long[ptr+20]
        debug("rx ARP request for me: Who has ", udec_byte_array_(ptr+24, 4), "? Tell ", udec_byte_array_(ptr+14, 4), " at ", uhex_byte_array_(ptr+8, 6))
        word[ptr][3] := bswap2(ARP_REPLY)
        ' Copy sender data to target
        bytemove(ptr+18, ptr+8, 10)
        debug("tx ARP reply: ", udec_byte_array_(@ownIPv4, 4), " is at ", uhex_byte_array_(@ownMAC, 6), " - tell ", udec_byte_array_(ptr+24, 4), " at ", uhex_byte_array_(ptr+18, 6))
        return
    ARP_REPLY:
      debug("rx ARP reply: ", udec_byte_array_(ptr+14, 4), " is at ", uhex_byte_array_(ptr+8, 6), " - tell ", udec_byte_array_(ptr+24, 4), " at ", uhex_byte_array_(ptr+18, 6))
    other:
      debug("rx ARP ", uhex_word(rx_len), ": bad ", uhex_word(opcode))

  ' No response by default
  abort 0

PUB setup_tx_arp(ptr, opcode) : payload_ptr | arp_hdr

  arp_hdr := setup_tx_eth(ptr, ETHERTYPE_ARP)

  word[ptr] := bswap2($0001)
  word[ptr][1] := bswap2(ETHERTYPE_IPv4)
  byte[ptr][4] := 6
  byte[ptr][5] := 4
  word[arp_hdr][3] := bswap2(opcode)

  payload_ptr := arp_hdr

PRI finalize_tx_arp(ptr, tx_len, dst)

  if tx_len < 28
    debug("tx ARP ", uhex_word(tx_len), " < ", uhex_(28), "; too short")
    abort 0
  if tx_len > 28
    debug("tx ARP ", uhex_word(tx_len), " > ", uhex_(28), "; extra bytes")

  ' Fill source MAC and IPv4 address with our own
  bytemove(ptr+8, @ownMAC, 6)
  bytemove(ptr+14, @ownIPv4, 4)

CON '' IPv4 - RFC 791
  ETHERTYPE_IPv4 = $0800
PUB on_rx_ipv4(eth_hdr, ptr, rx_len) : tx_len, dst

  debug("rx IPv4 ", uhex_word(rx_len), ": NYI")
  abort 0

PRI finalize_tx_ipv4(ptr, tx_len)

  debug("tx IPv4 ", uhex_word(tx_len), ": NYI")
  abort 0

CON '' IPv6 - RFC 8200
  ETHERTYPE_IPv6 = $86DD
PUB on_rx_ipv6(eth_hdr, ptr, rx_len) : tx_len, dst

  debug("rx IPv6 ", uhex_word(rx_len), ": NYI")
  abort 0

PRI finalize_tx_ipv6(ptr, tx_len)

  debug("tx IPv6 ", uhex_word(tx_len), ": NYI")
  abort 0

CON '' ICMPv4 - RFC 1624
CON '' TCP - RFC 793
CON '' UDP - RFC 768
CON '' DHCP - RFC TODO
CON '' mDNS - RFC TODO
CON '' DNS - RFC TODO
CON '' Hosts table
  ''TODO

  DST_REPLY     = -1
  DST_BROADCAST = -2
  DST_MANUAL    = -3

DAT
              alignl

' host 0: self
ownIPv4       byte 0, 0, 0, 0
ownMAC        byte $00, $00, $00, $00, $00, $00

PUB link_reset

  '' TODO

PUB set_mac(i, ptr)
  ifnot i
    bytemove(@ownMAC, ptr, 6)

PUB set_ipv4(i, ptr)
  ifnot i
    bytemove(@ownIPv4, ptr, 4)

CON '' Utility functions
PUB bswap2(w) : result
  return w.byte[0] << 8 | w.byte[1]

PUB bswap4(l) : result
  return l.byte[0] << 24 | l.byte[1] << 16 | l.byte[2] << 8 | l.byte[3]

CON '' Internet checksum - RFC 1071
PUB ip_csum(ptr, rx_len) : csum

  return ip_csum_final(ip_csum_acc(ptr, rx_len))

PUB ip_csum_acc(ptr, rx_len) : csum | i

  csum~
  repeat i from 0 to rx_len-1
    if i & 1
      csum += byte[ptr++]
    else
      csum += byte[ptr++] << 8

PUB ip_csum_final(csum) : out

  ' fold carries
  csum := csum.word[0] + csum.word[1]
  ' fold final carry
  csum := csum.word[0] + csum.word[1]

  ' complement, swap bytes, and mask
  return bswap2(!csum)

CON '' Copyright
{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

}}
